import React, { Component } from 'react';
// import ReactDOM from 'react-dom';
import HexagonGrid from 'react-hexagon-grid';
import times from 'lodash/times';
import { Document, Page, pdfjs } from 'react-pdf';
import map from './forbiddenLandsHexMap.pdf';
import ResetableQueue from './resetableQueue';
import './App.css';

pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;


class App extends Component {
  render() {
    const getHexProps = (hexagon) => ({
      style: {
        fill: '#007aff',
        stroke: 'white',
      },
      onClick: () => console.log(`Hexagon n.${hexagon} has been clicked`),
    });

    const renderHexagonContent = (hexagon) => (
      <text
        x="100%"
        y="100%"
        textAnchor="middle"
      >
        {hexagon}
      </text>
    );

    const oddLetters = ['B', 'D', 'F', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 'Ab', 'Ad', 'Af', 'Ah', 'Aj', 'Al', 'An'];
    const evenLetters = ['A', 'C', 'E', 'G', 'I', 'K', 'M', 'O', 'Q', 'S', 'U', 'W', 'Y', 'Aa', 'Ac', 'Ae', 'Ag', 'Ai', 'Ak', 'Am', 'Ao'];
    // const allLetters = [
    // 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
    // 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Aa', 'Ab', 'Ac', 'Ad', 'Ae', 'Af', 'Ag', 'Ah',
    // 'Ai', 'Aj', 'Ak', 'Al', 'Am', 'An', 'Ao'
    // ];

    const oddNums = [
      1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25,
      27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49,
    ];
    const evenNums = [
      2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,
      28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50,
    ];
    const nums = [
      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
      15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
      27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
      39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
      51,
    ];

    const originalColumnQueue = new ResetableQueue(oddLetters.concat(evenLetters));
    const shortenedColumnQueue = new ResetableQueue(
      evenLetters.slice(0, -2).concat(oddLetters.slice(0, -2)),
    );
    const rowQueue = new ResetableQueue(nums);
    const shortenedRowQueue = new ResetableQueue(
      oddNums.slice(0, -3).concat(evenNums.slice(0, -3)),
    );
    console.log(shortenedRowQueue);

    // 0..20 41 83 125 167 209 251 293 335 377 419 461 503 545 587
    // 629 671 713 755 797 839 881 923 965 1007 1049 1091 1092..1112
    // atlas
    // 775 776 795 796 817 818 837 838 859 860 879 880 901 902
    // 921 922 943 944 963 964 985 986 1005 1006 1027 1028 1047 1048 1069 1070 1089 1090
    const invalidIds = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
      10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
      20, 41, 83, 125, 167, 209, 251, 293, 335, 377,
      419, 461, 503, 545, 587, 629, 671, 713, 755, 797,
      839, 881, 923, 965, 1007, 1049, 1091, 1092, 1093, 1094,
      1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
      1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 775, 776,
      795, 796, 817, 818, 837, 838, 859, 860, 879, 880,
      901, 902, 921, 922, 943, 944, 963, 964, 985, 986,
      1005, 1006, 1027, 1028, 1047, 1048, 1069, 1070, 1089, 1090,
    ];

    const validIds = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1113]; // eslint-disable-line max-len
    console.log(validIds);

    const obj = {
      odd: [
        ['B'], ['D'], ['F'], ['H'], ['J'], ['L'], ['N'], ['P'], ['R'], ['T'], ['V'], ['X'], ['Z'], ['B', 'b'], ['D', 'd'], ['F', 'f'], ['H', 'h'], ['J', 'j'], ['L', 'l'], ['N', 'n'],
      ],
      even: [
        ['A'], ['C'], ['E'], ['G'], ['I'], ['K'], ['M'], ['O'], ['Q'], ['S'], ['U'], ['W'], ['Y'], ['A', 'a'], ['C', 'c'], ['E', 'e'], ['G', 'g'], ['I', 'i'], ['K', 'k'], ['M', 'm'], ['O', 'o'],
      ],
    };
    console.log(obj);
    const columns = [
      ['A'], ['B'], ['C'], ['D'], ['E'], ['F'], ['G'], ['H'], ['I'], ['J'],
      ['K'], ['L'], ['M'], ['N'], ['O'], ['P'], ['Q'], ['R'], ['S'], ['T'],
      ['U'], ['V'], ['W'], ['X'], ['Y'], ['Z'], ['A', 'a'], ['B', 'b'], ['C', 'c'], ['D', 'd'], ['E', 'e'], ['F', 'f'], ['G', 'g'], ['H', 'h'], ['I', 'i'], ['J', 'j'], ['K', 'k'], ['L', 'l'], ['M', 'm'], ['N', 'n'], ['O', 'o'],
    ];
    console.log(columns);
    let currentRow = 0;
    let currentColumn = '';
    let columnQueue = originalColumnQueue;
    const hexagons = times(1113, (id) => {
      if (id === 755) {
        // columnQueue.resetAtCount = 3
        columnQueue = shortenedColumnQueue;
      }
      if (invalidIds.includes(id)) {
        return null;
      } currentColumn = columnQueue.dequeue();
      if (currentColumn === 'A' || currentColumn === 'B') {
        currentRow = rowQueue.dequeue();
      }
      const output = `${currentColumn}${currentRow}  --  id: ${id}`;
      // if (currentRow === 27) { debugger}
      // if (output === 'Al37') { debugger; }
      return output;


      // we have 21
      // it should be A1
      // then we'll have 22
      // it should be B1
    });

    const width = 3000;
    const height = 2368;

    return (
      <div className="App">
        <div className="document">
          <Document
            file={map}
            onLoadError={console.error}
            onLoadSuccess={this.onDocumentLoadSuccess}
          >
            <Page width={width + 10} pageNumber={1} />
          </Document>
        </div>
        <div className="hexGrid">
          <HexagonGrid
            gridWidth={width}
            gridHeight={height}
            hexagons={hexagons}
            hexProps={getHexProps}
            renderHexagonContent={renderHexagonContent}
          />
        </div>
      </div>
    );
  }
}
export default App;
